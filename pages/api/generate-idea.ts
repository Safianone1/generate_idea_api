console.log("‚úÖ API called");Ôªø
import type { NextApiRequest, NextApiResponse } from 'next';
import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log("‚úÖ API /generate-idea hit");
  
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, x-user-id");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  
  if (req.method !== "POST") {
    return res.status(405).json({ error: "M√©thode non autoris√©e" });
  }

  const userId = req.headers["x-user-id"];
  if (typeof userId !== "string" || !userId || userId === "undefined") {
    return res.status(401).json({ error: "Utilisateur non authentifi√©." });
  }

  // üîí V√©rification de la limite journali√®re
  const { count, error: countError } = await supabase
    .from("idea_usage")
    .select("*", { count: "exact", head: true })
    .eq("user_id", userId)
    .gte("timestamp", new Date(new Date().setHours(0, 0, 0, 0)).toISOString());

  if (countError) {
    return res.status(500).json({ error: "Erreur lors de la v√©rification du quota." });
  }
  if ((count ?? 0) >= 20) {
    return res.status(429).json({ error: "Limite quotidienne atteinte (20 id√©es max / jour)." });
  }
    
  const { data: videos, error } = await supabase
    .from('ideo_feed')
    .select('title') // üîÅ Ne s√©lectionne que "title"
    .eq('user_id', userId)
    .limit(25); // ‚õîÔ∏è Enl√®ve l'ordre sur "views" pour √©viter tout crash

  if (error || !videos || videos.length === 0) {
    return res.status(500).json({ error: "Impossible de r√©cup√©rer les vid√©os.", debug: { userId, videos, supabaseError: error } });
  }

  const formattedList = videos.map(v => `- ${v.title}`).join("\n");

  const prompt = (
    `
Tu es un expert en strat√©gie YouTube. Voici des titres de vid√©os qui ont tr√®s bien march√© r√©cemment aux √âtats-Unis dans des niches proches :

${formattedList}

Ta mission :

1. D√©tecter les sujets puissants et r√©currents qui se cachent dans ces titres.
2. Imaginer un seul nouveau titre pour une vid√©o YouTube, en fran√ßais, ultra pertinent pour un cr√©ateur ambitieux en francophonie.
3. Ne fais pas une simple traduction : r√©adapte le style, le vocabulaire et le ton pour que √ßa sonne 100% natif fran√ßais.
4. Ton titre doit √™tre court, percutant, et donner tr√®s envie de cliquer. Il peut √™tre formul√© comme :

   - une promesse chiffr√©e
   - une m√©thode d√©couverte
   - une strat√©gie secr√®te
   - une √©tude de cas surprenante
   - une annonce choquante ou rare
   
Tu peux fusionner plusieurs id√©es ou les adapter, mais ne sors pas de la niche. Pas d'explication, juste le titre seul.

    `
  ).trim();

  try {
    const completion = await openai.chat.completions.create({
      messages: [
        { role: "system", content: "Tu es un expert YouTube tr√®s concis et percutant." },
        { role: "user", content: prompt },
      ],
      model: "gpt-4-turbo",
    });

    const idea = completion.choices[0].message.content;

    // ‚úÖ Log de l'usage pour cette requ√™te
    await supabase.from("idea_usage").insert({
      user_id: userId,
    });
    
    return res.status(200).json({ idea });
  } catch (err) {
    return res.status(500).json({ error: "Erreur lors de la g√©n√©ration." });
  }
}
